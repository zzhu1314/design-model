工厂模式（创建型）：目的让使用者不要直接依赖创建者，去依赖一个生产创建者的类（工厂），做到使用者与创建者的解耦，遵循ocp原则，依赖倒转原则（面向接口，抽象编程）
简单工厂：将产品抽象成一个抽象类，让具体产品去继承这个抽象类，创建一个工厂类来生产这些产具体品类（只有一个工厂），使用者直接调用工厂
        缺点：当新增产品时需要修改工厂类的代码，不完全符合ocp原则。
工厂方法：工厂方法具有多个实现相同接口的工厂类，将产品跟工厂都抽象出来，创建产品由具体的工厂类去创建，当需要扩展时，只需要新增产品和工厂类，无需修改原来的
代码，完全符合ocp原则。（一个工厂负责一个产品）  不修改已有类的前提下，通过增加新的工厂类实现扩展

抽象工厂：抽象工厂针对多个产品结构，而工厂方法只针对一个产品结构 ，一个工厂对应多个产品，多个产品对应一个产品族，
 要点：不可以增加产品，可以增加产品族

应用场景：

1)JDK中Calendar的getInstance方法；

2)JDBC中Connection对象的获取；

3)Hibernate中SessionFactory创建Session;

4)Spring中IOC容器创建管理bean对象；

5)XML解析时的DocumentBuilderFactory创建解析器对象；

6)反射中Class对象的newInstance()。
